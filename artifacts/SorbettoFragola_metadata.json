{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_pool03",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_strategy",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_maxTotalSupply",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "feesFromPool0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "feesFromPool1",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "usersFees0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "usersFees1",
						"type": "uint256"
					}
				],
				"name": "CollectFees",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidity",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"name": "Deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "int24",
						"name": "tickLower",
						"type": "int24"
					},
					{
						"indexed": false,
						"internalType": "int24",
						"name": "tickUpper",
						"type": "int24"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"name": "Rerange",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fees0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fees1",
						"type": "uint256"
					}
				],
				"name": "RewardPaid",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalAmount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalAmount1",
						"type": "uint256"
					}
				],
				"name": "Snapshot",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousGovernance",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newGovernance",
						"type": "address"
					}
				],
				"name": "TransferGovernance",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "shares",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"name": "Withdraw",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "acceptGovernance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "accruedProtocolFees0",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "accruedProtocolFees1",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"name": "collectFees",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"name": "collectProtocolFees",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "subtractedValue",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount0Desired",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1Desired",
						"type": "uint256"
					}
				],
				"name": "deposit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "shares",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "finalized",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "governance",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "init",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxTotalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingGovernance",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pool03",
				"outputs": [
					{
						"internalType": "contract IUniswapV3Pool",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "position",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "liquidity",
						"type": "uint128"
					},
					{
						"internalType": "uint256",
						"name": "feeGrowthInside0LastX128",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "feeGrowthInside1LastX128",
						"type": "uint256"
					},
					{
						"internalType": "uint128",
						"name": "tokensOwed0",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "tokensOwed1",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rebalance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rerange",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_governance",
						"type": "address"
					}
				],
				"name": "setGovernance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_maxTotalSupply",
						"type": "uint256"
					}
				],
				"name": "setMaxTotalSupply",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_strategy",
						"type": "address"
					}
				],
				"name": "setStrategy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "strategy",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tickLower",
				"outputs": [
					{
						"internalType": "int24",
						"name": "",
						"type": "int24"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tickSpacing",
				"outputs": [
					{
						"internalType": "int24",
						"name": "",
						"type": "int24"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tickUpper",
				"outputs": [
					{
						"internalType": "int24",
						"name": "",
						"type": "int24"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token0",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token0PerShareStored",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token1",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token1PerShareStored",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "uniswapV3MintCallback",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "amount0",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "amount1",
						"type": "int256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "uniswapV3SwapCallback",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userInfo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "token0Rewards",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "token1Rewards",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "token0PerSharePaid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "token1PerSharePaid",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "usersFees0",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "usersFees1",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "weth",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "shares",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Sorbetto fragola is a Uniswap V3 yield enchancement contract which acts as intermediary between the user who wants to provide liquidity to specific pools and earn fees from such actions. The contract ensures that user position is in  range and earns maximum amount of fees available at current liquidity utilization rate. ",
			"events": {
				"CollectFees(uint256,uint256,uint256,uint256)": {
					"params": {
						"feesFromPool0": "Total amount of fees collected in terms of token 0",
						"feesFromPool1": "Total amount of fees collected in terms of token 1",
						"usersFees0": "Total amount of fees collected by users in terms of token 0",
						"usersFees1": "Total amount of fees collected by users in terms of token 1"
					}
				},
				"Deposit(address,uint256,uint256,uint256)": {
					"params": {
						"amount0": "How much token0 was required for the added liquidity",
						"amount1": "How much token1 was required for the added liquidity",
						"liquidity": "The amount of liquidity added by the user to position",
						"sender": "The address that minted the liquidity"
					}
				},
				"Rerange(int24,int24,uint256,uint256)": {
					"params": {
						"amount0": "Amount of token 0 deposited to the position",
						"amount1": "Amount of token 1 deposited to the position",
						"tickLower": "Lower price tick of the positon",
						"tickUpper": "Upper price tick of the position"
					}
				},
				"RewardPaid(address,uint256,uint256)": {
					"params": {
						"fees0": "Exact amount of fees claimed by the users in terms of token 0 ",
						"fees1": "Exact amount of fees claimed by the users in terms of token 1",
						"sender": "User address"
					}
				},
				"Snapshot(uint256,uint256)": {
					"params": {
						"totalAmount0": "Current token0 Sorbetto's balance",
						"totalAmount1": "Current token1 Sorbetto's balance"
					}
				},
				"Withdraw(address,uint256,uint256,uint256)": {
					"params": {
						"amount0": "How much token0 was required for the added liquidity",
						"amount1": "How much token1 was required for the added liquidity",
						"sender": "The address that minted the liquidity",
						"shares": "of liquidity withdrawn by the user from the position"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
				},
				"allowance(address,address)": {
					"details": "See {IERC20-allowance}."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See {IERC20-balanceOf}."
				},
				"constructor": {
					"details": "After deploying, strategy can be set via `setStrategy()`",
					"params": {
						"_maxTotalSupply": "max total supply of PLP",
						"_pool03": "Underlying Uniswap V3 pool with fee = 3000",
						"_strategy": "Underlying Sorbetto Strategy for Sorbetto settings"
					}
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
				},
				"decreaseAllowance(address,uint256)": {
					"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
				},
				"deposit(uint256,uint256)": {
					"params": {
						"amount0Desired": "Max amount of token0 to deposit",
						"amount1Desired": "Max amount of token1 to deposit"
					},
					"returns": {
						"amount0": "Amount of token0 deposited",
						"amount1": "Amount of token1 deposited",
						"shares": "minted"
					}
				},
				"increaseAllowance(address,uint256)": {
					"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"nonces(address)": {
					"details": "See {IERC20Permit-nonces}."
				},
				"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "See {IERC20Permit-permit}."
				},
				"rebalance()": {
					"details": "Swaps imbalanced token. Finds base position and limit position for imbalanced token if we don't have balance during swap because of price impact. mints all amounts to this position(including earned fees)"
				},
				"rerange()": {
					"details": "Finds base position and limit position for imbalanced token mints all amounts to this position(including earned fees)"
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
				},
				"uniswapV3MintCallback(uint256,uint256,bytes)": {
					"details": "In the implementation you must pay to the pool for the minted liquidity.",
					"params": {
						"amount0": "The amount of token0 due to the pool for the minted liquidity",
						"amount1": "The amount of token1 due to the pool for the minted liquidity",
						"data": "Any data passed through by the caller via the IUniswapV3PoolActions#mint call"
					}
				},
				"uniswapV3SwapCallback(int256,int256,bytes)": {
					"details": "In the implementation you must pay to the pool for swap.",
					"params": {
						"_data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call",
						"amount0": "The amount of token0 due to the pool for the swap",
						"amount1": "The amount of token1 due to the pool for the swap"
					}
				},
				"withdraw(uint256)": {
					"details": "Removes proportional amount of liquidity from Uniswap.",
					"params": {
						"shares": "burned by sender"
					},
					"returns": {
						"amount0": "Amount of token0 sent to recipient",
						"amount1": "Amount of token1 sent to recipient"
					}
				}
			},
			"stateVariables": {
				"pool03": {
					"return": "The address of the Uniswap V3 Pool"
				},
				"tickSpacing": {
					"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
					"return": "The tick spacing"
				},
				"token0": {
					"return": "The token contract address"
				},
				"token1": {
					"return": "The token contract address"
				}
			},
			"title": "Sorbetto Fragola is a yield enchancement v3 contract",
			"version": 1
		},
		"userdoc": {
			"events": {
				"CollectFees(uint256,uint256,uint256,uint256)": {
					"notice": "Emitted when fees was collected from the pool"
				},
				"Deposit(address,uint256,uint256,uint256)": {
					"notice": "Emitted when user adds liquidity"
				},
				"Rerange(int24,int24,uint256,uint256)": {
					"notice": "Emitted when sorbetto fragola changes the position in the pool"
				},
				"RewardPaid(address,uint256,uint256)": {
					"notice": "Emitted when user collects his fee share"
				},
				"Snapshot(uint256,uint256)": {
					"notice": "Shows current Sorbetto's balances"
				},
				"Withdraw(address,uint256,uint256,uint256)": {
					"notice": "Emitted when user withdraws liquidity"
				}
			},
			"kind": "user",
			"methods": {
				"acceptGovernance()": {
					"notice": "Governance address is not updated until the new governance address has called `acceptGovernance()` to accept this responsibility."
				},
				"collectFees(uint256,uint256)": {
					"notice": "Used to withdraw accumulated user's fees."
				},
				"collectProtocolFees(uint256,uint256)": {
					"notice": "Used to withdraw accumulated protocol fees."
				},
				"deposit(uint256,uint256)": {
					"notice": "Deposits tokens in proportion to the Sorbetto's current ticks."
				},
				"pool03()": {
					"notice": "A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification"
				},
				"position()": {
					"notice": "Returns current Sorbetto's position in pool"
				},
				"rebalance()": {
					"notice": "Updates sorbetto's positions. Can only be called by the governance."
				},
				"rerange()": {
					"notice": "Updates sorbetto's positions."
				},
				"setGovernance(address)": {
					"notice": "`setGovernance()` should be called by the existing governance address prior to calling this function."
				},
				"tickLower()": {
					"notice": "The lower tick of the range"
				},
				"tickSpacing()": {
					"notice": "The pool tick spacing"
				},
				"tickUpper()": {
					"notice": "The upper tick of the range"
				},
				"token0()": {
					"notice": "The first of the two tokens of the pool, sorted by address"
				},
				"token1()": {
					"notice": "The second of the two tokens of the pool, sorted by address"
				},
				"uniswapV3MintCallback(uint256,uint256,bytes)": {
					"notice": "Pull in tokens from sender. Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint."
				},
				"uniswapV3SwapCallback(int256,int256,bytes)": {
					"notice": "Called to `msg.sender` after minting swaping from IUniswapV3Pool#swap."
				},
				"withdraw(uint256)": {
					"notice": "Withdraws tokens in proportion to the Sorbetto's holdings."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"SorbettoFragola.sol": "SorbettoFragola"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 800
		},
		"remappings": []
	},
	"sources": {
		"SorbettoFragola.sol": {
			"keccak256": "0x3b955824ad38100a742a316c851c9f26e4823ec3f980a9ed5f3babf29e19c991",
			"license": "MIT",
			"urls": [
				"bzz-raw://19bf72f4dbc6ff29a7036d636135f556d689dde3e662be3ea5a89720c7fe9446",
				"dweb:/ipfs/QmSauMEd8RmyoNazASRoc47iprjzgwTsrN1fy7zJG8fsTE"
			]
		},
		"base/EIP712.sol": {
			"keccak256": "0x44605029b56d04442739d0de136f1d134759577d55b8f1d0cdd618b3a6974d4d",
			"license": "MIT",
			"urls": [
				"bzz-raw://bab8faaf9e24aeb753d9f1242bd5477be7d5ad51284ad3bdb57c30f4f5dc2f68",
				"dweb:/ipfs/QmZspUYrPGW4RWjLLWJrEoEyBEBeihFGrirxbAkfd6qNb5"
			]
		},
		"base/ERC20Permit.sol": {
			"keccak256": "0x8a60a9d76ab79a17f8a4d0f5cfea5054e2ccb395b1633b5bfc3f8a68edf1e278",
			"license": "MIT",
			"urls": [
				"bzz-raw://cd579665a7f00ad32eab9f5b52056f4206536f5e3870c22aef9ed215e589f3b6",
				"dweb:/ipfs/QmXrh9MGfDHFECkdAzZnQ9iAYgn13PqABeEZm5AppkHTif"
			]
		},
		"interfaces/ISorbettoStrategy.sol": {
			"keccak256": "0x79f6205c3d4d52b63fdc871f7b021552bf618911e196b1387cab9b316143ef5c",
			"license": "MIT",
			"urls": [
				"bzz-raw://a21e36244afcc894d37c4aab09e7beb5eaafbe37605c5a60b97e2fe3d80c770a",
				"dweb:/ipfs/QmSA94wTt3NA5MpR8WAc7C9NXDvtnWTnwsH7QaCYw3BYrD"
			]
		},
		"interfaces/IUniswapV3Pool.sol": {
			"keccak256": "0x7a321d70fa9481ddad11413e44d81f11dd9c0421e39deb835a906fb9a5ac3197",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://86442a7bb847aeb13d971a5662f00363ed371f67bc10bda0aae0f00f1cd1e4a4",
				"dweb:/ipfs/QmPe5tbs74jFhfrCWF2pRCmjx1DPmqJcvr4W2E5hmtSTgd"
			]
		},
		"interfaces/IsorbettoFragola.sol": {
			"keccak256": "0x6560b969b81fd42457c884fe8fb29c52a31361920ef5fc4c77f97df2113328d8",
			"license": "MIT",
			"urls": [
				"bzz-raw://05e367826c650775670cb2948eb2a8cacf33e0227477413600c8cac75b229acc",
				"dweb:/ipfs/QmR4bYHm5Z5xQamE2Ru1SJQBaiaf2XNT8FyqJcz4Agoqtz"
			]
		},
		"interfaces/external/IWETH9.sol": {
			"keccak256": "0x62fe7f3f76655a6023f7579cb50762eb011499f2d8107b16dc161709c694a5fc",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://8d331b8e932b54a4fea54c721ad36f41adc7096d6c4c4966de923fba64f68d4a",
				"dweb:/ipfs/QmNbVeoJsBJSUbfZHa4A3BeWkegJFhbSLLhpg22DKuBycZ"
			]
		},
		"interfaces/pool/IUniswapV3PoolActions.sol": {
			"keccak256": "0x83df9839f361f693730525cce74de42eed0fe0610d1f27acb35baed589ed055a",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://3bddabf465774b942b0437b53c42756a419337d67e9740d03eb2951db96d3b5f",
				"dweb:/ipfs/QmQsw6o116XaiUWNSdcDYMV4hAdJLigVFMk7PvBQSCcaFe"
			]
		},
		"interfaces/pool/IUniswapV3PoolDerivedState.sol": {
			"keccak256": "0xcdca0e6dfa43399ea20e36dca134597d677c8836ebf0880948c98ecdd4d0f9f8",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://237e1a44f9d345984635d6259e78c1935cbcc88b09780f15016293ae0a433b20",
				"dweb:/ipfs/QmNaum3aeVeEDvi7AqohBv6pazSJV1sx8rQdukqumQpLk2"
			]
		},
		"interfaces/pool/IUniswapV3PoolImmutables.sol": {
			"keccak256": "0x19422690a0df67b004285d938d7c4bc11760da558d1e557c37be312c445228fb",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://4d999e2db795781365dabd26f708652769d1bc19443839a180d1ec49a6540854",
				"dweb:/ipfs/QmaVJnq3zZyfB8fXPsh7r21Ma8t42FgGxavtAeWZFDsWy2"
			]
		},
		"interfaces/pool/IUniswapV3PoolState.sol": {
			"keccak256": "0x186a92a782d49ae41e337e634d95de6275e8963ccc02e3291d4d23fd1010e4c8",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://58cec55b33f6bfa70fcd2464e26fcae1f2c2f50f61e0ee480ad786bb501fe91d",
				"dweb:/ipfs/QmSGH7uRdEm4zV9KhYzBazHrCbHPb1BMqkszKhuyNj2PBo"
			]
		},
		"libraries/Babylonian.sol": {
			"keccak256": "0xba3eb5b8b89c625726e75ca34a5375e032803f3e7a0dbb0d41ba87cd25e73ab1",
			"license": "GPL-3.0-or-later",
			"urls": [
				"bzz-raw://d5adef9f55a5a4a0b9fa473c5504d81ff5b789ebccfc80c3d30588b6c716c043",
				"dweb:/ipfs/QmPc8fXTDcoGYSJzZbX9U5UN98qtpmTkYXzumFJ4zSb5VG"
			]
		},
		"libraries/ChainId.sol": {
			"keccak256": "0x7e0b2bd438b4ce6c56c11457f16a67bab647cfb3677f4de59069fa36b04ef29f",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://479bd880ff595b0dff41a7af685c7049c25adad3896d7f5582d324edb4e68b5d",
				"dweb:/ipfs/QmSv271E3E1wMVXZRzuMFNwW2h6su95XUrZb3tMVvWtu9h"
			]
		},
		"libraries/Counters.sol": {
			"keccak256": "0xec1690d9e3920de989776b6cc336d1a614e587a53a263c7cc190d6a7f26dc958",
			"license": "MIT",
			"urls": [
				"bzz-raw://a632066c371328ae411866c710846c6b535687c2c89e29b09ca477feda3f5bd8",
				"dweb:/ipfs/QmcQ9FbGYGWBUYocnjenEwPjNUZv8qQFLLu7eZud861dBy"
			]
		},
		"libraries/ECDSA.sol": {
			"keccak256": "0x9e1ef7200e880629b0b77d3b268ecf6f5760106849576410d3ce28c01a5644ef",
			"license": "MIT",
			"urls": [
				"bzz-raw://9b334f25977bff093e06a6fe1a53faf3bd0f6a458ef7e2413665b71982c3e739",
				"dweb:/ipfs/QmdZakKiuPjcLaeiX8c2Me6BJRdY6tXRock18vHTT6LwfL"
			]
		},
		"libraries/FixedPoint96.sol": {
			"keccak256": "0xb677c7af76c11c1704a190cf481c7d3a2af14a4b4db7547d0f03dff690ee4e1e",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://e8bad520b080ec871ff19a4a5e3c3a49f3e3a33246053a19fbad50c112232f19",
				"dweb:/ipfs/QmZ7G5wybxuewsi5RCRYTWXmDg76X7agHGrPWEPLohr4vm"
			]
		},
		"libraries/FullMath.sol": {
			"keccak256": "0x38f9c8c41e7138c95a6d1a059960b4db41b451e40c6b82f38035c5e8ad224b4c",
			"license": "MIT",
			"urls": [
				"bzz-raw://8b2092e6d76d5b4f08c13355f56ead3447d6ddfca6afe8518149d6d9942aa469",
				"dweb:/ipfs/QmPZSopxFGV7VTpmxYmwZ66DcYCXATW6Zs46pgH43HSA7y"
			]
		},
		"libraries/LiquidityAmounts.sol": {
			"keccak256": "0xf1343421d037b4af9417c35dc5e0fc5f8ed1d1a0f1b38a0918dd0507959cc10e",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://cd19d1d75d6682d601e613cc2536c868b581314f8a2d695e93c43a940c711fcf",
				"dweb:/ipfs/Qmb2vGpi6QCzXjePB7pc6wtGkwpUytrDUjLXEE8ZWqANTm"
			]
		},
		"libraries/LowGasSafeMath.sol": {
			"keccak256": "0x127d0b5a508d8303dd19ac3579ef0d0c6413e42687f5f1e5f05f53c1a0460cd7",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://9ece3caaaa8e6986cc7ff4195380b013e7d6cbdfa4ad802c51677fd0010d6ed2",
				"dweb:/ipfs/QmbeJA8XisHi9cibH3uNctycHdw797fyH8iwpqByQMF3dV"
			]
		},
		"libraries/PoolActions.sol": {
			"keccak256": "0x97640c292e22ebac99e322deba49b36ad3325891038efedaf72118f44adec477",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://bd7480037712f0860b741eda1df7e6e04422f7618f07ba6789c1afa5d80bf03f",
				"dweb:/ipfs/QmNnpiaWXdBfzUXdMZuEQycCCop2BzBuieJLHx53cjeMiu"
			]
		},
		"libraries/PoolVariables.sol": {
			"keccak256": "0xf08d44f650ff97407ea8faa5e0f5657f491572ba99b1b37e8e2b1b0fbeb995a3",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://8a398ef4873b8751450b859eebe4dd7f84c3832e04c7f7c269a71b11cd2fb717",
				"dweb:/ipfs/QmeY5Twv3k3isaFDVj6fJ4FGT5wYd6gpw2QgYcpgs1deN6"
			]
		},
		"libraries/PositionKey.sol": {
			"keccak256": "0x5ddc2e0c861f3c58c120c6fe24e0116c9ed0a446380d46b67e3899bc11b3bfd3",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://140043be3dff9309b19e49bbe3125099d0cceb63107d460f72b2db082c1d1684",
				"dweb:/ipfs/QmXWXJ82WW93KxCGvGfxF9gXSywNZUmzpAWQ2NQTkpqkDB"
			]
		},
		"libraries/SafeCast.sol": {
			"keccak256": "0xbd3aeff1ea0d42d94ff45ffb92254eadba4a80959c80836e7f1da54a065f62d7",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://d5a5e4d2f8056512b0bd5143fa04e6fcde2926fcfc7d97f4b31ba4b989b4b831",
				"dweb:/ipfs/QmNPv69gcEpZFsRRdgVYpUBPjNmXPxVGmGpLdKyX8o2E88"
			]
		},
		"libraries/SqrtPriceMath.sol": {
			"keccak256": "0xb56da67f531cff892f3eaec3b1049a77be3fd0f5ee711f696f0492c72ac9d781",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://1c6047551b5184dda5f75e7a00a5b8f9009564e74e08b8d15bf3f8e0c255c47c",
				"dweb:/ipfs/QmZbaUYh2XagKCtyy7DatFN5DD28CuWu7Qdti6orQa1x6i"
			]
		},
		"libraries/TickMath.sol": {
			"keccak256": "0xd5d5fc572f416a6f403d56350e5431468376d6285ba28e7322238e509de20f1e",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://763ea79416f4ae4ebd9662ab06004289b2c654bbee8b7ca203d14f2f3765a871",
				"dweb:/ipfs/QmUFCMnMZQoSM7TnHCJrNpQKD9fkQbBRjBWQfjPbUJsZUZ"
			]
		},
		"libraries/TransferHelper.sol": {
			"keccak256": "0xc176df9220dd3fd246352e216aceb6a298aea9f0e0f06f2a722fa43f2f326e53",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://e40df8bf24fec0ef5a6a9ad1e73d21e0f0551b3794f51b9a7fbbf0dd2b651d07",
				"dweb:/ipfs/QmQFMQskF7PuxhFGVLYQuWkSinVW66CRxMuyFf7MvBzkN5"
			]
		},
		"libraries/UnsafeMath.sol": {
			"keccak256": "0xf56c4910ec2008da81b3a363a83fe46ff91a5a2ba02955e07495431b6c14b764",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://9a416594ddafb0f6265d15e5f4b3e7ef664b325362f4f1ed9d90dec326392527",
				"dweb:/ipfs/QmYeqdcCnNP2QPue4mb8nakL9CwRN8u77sUmZVCv2q7jGC"
			]
		},
		"token/ERC20.sol": {
			"keccak256": "0x3f9e0bd3dbd14c90c8a81c1d82e3f0e6ec09864b24b63cf2d1b935f01bd52339",
			"license": "MIT",
			"urls": [
				"bzz-raw://e47b3163bb64414a2b780f38e44a524281f5011e3e8dcdeebf140b5ba62aa577",
				"dweb:/ipfs/QmQsvJbdGSADepsU8u2wupLJpmCeBnaEGkEGwv2WTNx2BZ"
			]
		},
		"token/IERC20.sol": {
			"keccak256": "0x14ec24d0f20792b9c442bd6129d231f649ac9b5618b0aed97142bc13a023b706",
			"license": "MIT",
			"urls": [
				"bzz-raw://53829bfef5cf938285f797297cc26a10e9d41f03d20a5ff39aebc74b51dc691b",
				"dweb:/ipfs/QmQHRLWB4joKW7G6mwRV1cPxUPx7cVb3CqkC1n6v32Y4NE"
			]
		},
		"token/IERC20Permit.sol": {
			"keccak256": "0xfeb30c41482508c25f31ed2a38baba314d1634404748be607b1f55ea691feb12",
			"license": "MIT",
			"urls": [
				"bzz-raw://8cc385e5bf1afab7fb004341b59a2a02b9646032c91de3477aab477c4e82b8eb",
				"dweb:/ipfs/QmP5WCHsaACoxW6HcKuZP6paPPxrD7tyyMcns77mjEfJNG"
			]
		},
		"utils/Context.sol": {
			"keccak256": "0xa475c1685349498b21fd15bf23d66cc09480745186a5854b010784b620ffe4f3",
			"license": "MIT",
			"urls": [
				"bzz-raw://7aa171a3b0aeabd7b31b94cf63eb14df9fd3d2e3a12d5ba3d9a634a789871196",
				"dweb:/ipfs/QmNwZDsCn4Af9Uyw3syohXAAoe9pAwCuvCm6FZXG3Hv5ka"
			]
		},
		"utils/ReentrancyGuard.sol": {
			"keccak256": "0x2225fc9c62fc52b0e86ee3cccd977d147ce560a3e37694da8ee7c503cb6a8699",
			"license": "MIT",
			"urls": [
				"bzz-raw://a7edbca82e5b716e05bcc14067a905a034a53ad9fc0c35a5a31620430bb6413d",
				"dweb:/ipfs/QmYp69aQU7Wo7fuXdchgShqVNgzpBmTwB3sdUTA3Ei72ug"
			]
		}
	},
	"version": 1
}